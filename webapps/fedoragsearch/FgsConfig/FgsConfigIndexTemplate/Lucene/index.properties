# $Id: index.properties $

fgsindex.indexName					= INDEXNAME

fgsindex.operationsImpl				= dk.defxws.fgslucene.OperationsImpl

fgsindex.defaultUpdateIndexDocXslt		= INDEXINGDOCXSLT
fgsindex.defaultUpdateIndexResultXslt	= updateIndexToResultPage
fgsindex.defaultGfindObjectsResultXslt	= gfindObjectsToResultPage
fgsindex.defaultBrowseIndexResultXslt	= browseIndexToResultPage
fgsindex.defaultGetIndexInfoResultXslt	= copyXml

#fgsindex.indexDir				= <...> 
fgsindex.indexDir				= INDEXDIR

fgsindex.analyzer				= org.apache.lucene.analysis.standard.StandardAnalyzer
fgsindex.fieldAnalyzers			= dc.title::org.apache.lucene.analysis.standard.StandardAnalyzer dc.creator::org.apache.lucene.analysis.standard.StandardAnalyzer
# used to index and query TOKENIZED index fields
# for UN_TOKENIZED index fields see fgsindex.untokenizedFields further down

#Stopwords file for the analyzer, comment the line if no stopwords
#fgsindex.stopwordsLocation      = /stopwords.txt
 
fgsindex.defaultQueryFields		= dc.description dc.title

# setting of org.apache.lucene.queryParser.QueryParser setAllowLeadingWildcard()
# Set to true to allow leading wildcard characters, * or ?
# Default: false. 
fgsindex.allowLeadingWildcard	= false

# setting of org.apache.lucene.queryParser.QueryParser setLowercaseExpandedTerms()
# Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically lower-cased or not. 
# Default: true. 
fgsindex.lowercaseExpandedTerms = true

#sortFields may be given as parameter to gfindObjects, or as config default.
###########

# as parameter:			?operation=gfindObjects&sortFields=[sortFieldsValue]&...

# as config default:

#fgsindex.defaultSortFields			= sortFieldsValue

#examples:

#fgsindex.defaultSortFields			= PID,STRING,true

#fgsindex.defaultSortFields			= sf1,SCORE;sf2,cy-GB-var,true

#    sortFieldsValue	::= [sortField[';'sortField]*]
#    sortField  		::= sortFieldName[','(sortType | locale | comparatorClass)[','reverse]]]]
#    sortFieldName		::= #the name of an index field, which is UN_TOKENIZED and contains a single term per document
#    sortType			::= 'BYTE' | 'DOC' | 'DOUBLE' | 'FLOAT' | 'INT' | 'LONG' | 'SCORE' | 'SHORT' | 'STRING' | 'STRING_VAL'
#    locale				::= language['-'country['-'variant]]
#    comparatorClass    ::= package-path'.'className['('param['-'param]*')']
#    reverse			::= 'false' (default) | 'true' | 'reverse'

#    sortType 'AUTO' is removed in Lucene 3.x

# The test class dk.defxws.fedoragsearch.test.ComparatorSourceTest has been removed in GSearch 2.3,
# because the interface org.apache.lucene.search.SortComparatorSource is deprecated in Lucene 3.x

# Briefly, one or more sortFields will determine the sequence of search results,
# as defined either by sortType or by locale, and it may be in reverse.

# If no sortFieldsValue is given, then this code from GSearch is run

#   TopDocs hits = searcher.search(query, numHits); // in dk.defxws.fgslucene.Statement.java
  
# where the sequence is by default.

# If a sortFieldsValue is given, then this code is run

#   TopDocs hits = searcher.search(query, numHits, sort); 

# where sort is an instance of org.apache.lucene.search.Sort, see

#   http://lucene.apache.org/java/3_3_0/api/index.html

# See org.apache.lucene.search.SortField for more about sortType, locale and reverse values.


#fgsindex.untokenizedFields		= list of index fields created as UN_TOKENIZED
###########################
#									Effect: during search the KeywordAnalyzer is used for untokenized fields,
#									while the fgsindex.analyzer is used for other fields.
#									Only untokenized fields, which do not occur in every index document,
#									need be listed here.
# example:

#fgsindex.untokenizedFields		= fgs.contentModel uf1 uf2
fgsindex.untokenizedFields		= PID


# snippets
##########
#fgsindex.snippetBegin	= <span class=\"highlight\">
fgsindex.snippetBegin	= <span class=\"highlight\">
## this value is default if not specified
#fgsindex.snippetEnd	= </span>
fgsindex.snippetEnd	= </span>
## this value is default if not specified


# optimization  see e.g. http://www.onjava.com/pub/a/onjava/2003/03/05/lucene.html
##############
# fgsindex.mergeFactor		= 10
fgsindex.mergeFactor		= 100
## 10 is default if not specified
# fgsindex.maxBufferedDocs	= 10
fgsindex.maxBufferedDocs	= 100
## 10 is default if not specified
# fgsindex.defaultWriteLockTimeout	= 1000 
fgsindex.defaultWriteLockTimeout	= 0
## 0 is default if not specified
# from http://lucene.apache.org/java/2_3_0/api/IndexWriter.html :
## mergeFactor
##   determines how often segment indices are merged by addDocument(). 
##   With smaller values, less RAM is used while indexing, and searches on unoptimized indices are faster, 
##   but indexing speed is slower. With larger values, more RAM is used during indexing, 
##   and while searches on unoptimized indices are slower, indexing is faster. 
##   Thus larger values (> 10) are best for batch index creation, 
##   and smaller values (< 10) for indices that are interactively maintained.
## maxBufferedDocs 
##   determines the minimal number of documents required 
##   before the buffered in-memory documents are merged and a new Segment is created. 
##   Since Documents are merged in a RAMDirectory, large value gives faster indexing. 
##   At the same time, mergeFactor limits the number of files open in a FSDirectory.
## defaultWriteLockTimeout 
##   sets the default maximum time to wait for a write lock (in milliseconds). 

#  ...?operation=updateIndex&action=optimize
##        will perform IndexWriter.optimize()
##        which merges all segments together into a single segment, optimizing an index for search.

# custom URIResolver
####################
#fgsindex.uriResolver	= dk.defxws.fedoragsearch.server.URIResolverImpl
